// Complete the freqQuery function below.
function freqQuery(queries) {
    //gather writes
    let wrtMap = new Map();
    let highestCount = new Map();
    let insert = 1;
    let delet = 2;
    let write = 3;
    let output = [];

    for (let i = 0; i < queries.length; i++) {
        if (queries[i][0] === insert) {
            //set current insert
            if (wrtMap.has(queries[i][1])) {
                //set high count for writing
                if (highestCount.has(wrtMap.get(queries[i][1]))) {
                    //we need to remove from current and add to next
                    highestCount.set(
                        wrtMap.get(queries[i][1]),
                        returnCount(highestCount.get(wrtMap.get(queries[i][1])))
                    );
                }

                wrtMap.set(queries[i][1], wrtMap.get(queries[i][1]) + 1);
            } else {
                wrtMap.set(queries[i][1], 1);
            }

            //add to map if we have existing cout
            if (highestCount.has(wrtMap.get(queries[i][1]))) {
                highestCount.set(
                    wrtMap.get(queries[i][1]),
                    highestCount.get(wrtMap.get(queries[i][1])) + 1
                );
            } else {
                //add to map since we dont have an entry
                highestCount.set(
                    wrtMap.get(queries[i][1]),
                    1
                );
            }
        }

        if (queries[i][0] === delet) {
            if (wrtMap.has(queries[i][1])) {
                //get count
                let curWrtCount = wrtMap.get(queries[i][1]);
                if (highestCount.has(curWrtCount)) {
                    //remove deleted count
                    highestCount.set(curWrtCount, returnCount(highestCount.get(curWrtCount)));
                }

                wrtMap.set(queries[i][1], wrtMap.get(queries[i][1]) - 1);

                highestCount.set(
                    wrtMap.get(queries[i][1]),
                    highestCount.get(wrtMap.get(queries[i][1])) + 1
                );
            }
        }

        if (queries[i][0] === write) {
            if (highestCount.has(queries[i][1]) && highestCount.get(queries[i][1]) > 0) {
                output.push(1);
            } else {
                output.push(0);
            }
        }
    }

    return output;
}

function returnCount (current) {
    if (current === 0) {
        return 0;
    }

    return current - 1;
}

//0, 1
console.log(freqQuery([ [ 1, 5 ],
    [ 1, 6 ],
    [ 3, 2 ],
    [ 1, 10 ],
    [ 1, 10 ],
    [ 1, 6 ],
    [ 2, 5 ],
    [ 3, 2 ] ]));

//0, 1
console.log(freqQuery([ [ 3, 4 ], [ 2, 1003 ], [ 1, 16 ], [ 3, 1 ] ]));

//0, 1, 1
console.log(freqQuery([ [ 1, 3 ],
    [ 2, 3 ],
    [ 3, 2 ],
    [ 1, 4 ],
    [ 1, 5 ],
    [ 1, 5 ],
    [ 1, 4 ],
    [ 3, 2 ],
    [ 2, 4 ],
    [ 3, 2 ] ]));

//0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1,
//1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0,
//0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0,
//1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0,
//0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0,
//0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1,
//0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1,
//1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1,
//1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1,
//0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0,
//0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0,
//0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0,
//0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
//1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1,
//0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
//1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1,
//0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
//1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
//1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
//1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
//1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
//1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
//1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
//1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
//1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
//1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
//1, 1, 1, 1, 1, 1, 1, 1, 1
console.log(freqQuery ([
    [3, 5],
    [3, 3],
    [1, 10000004],
    [1, 10000016],
    [1, 10000011],
    [3, 10],
    [1, 10000006],
    [3, 5],
    [2, 4],
    [2, 3],
    [2, 6],
    [1, 10000037],
    [3, 10],
    [3, 3],
    [1, 10000013],
    [1, 10000013],
    [3, 10],
    [3, 10],
    [1, 10000025],
    [1, 10000021],
    [2, 7],
    [1, 10000002],
    [3, 7],
    [3, 9],
    [2, 9],
    [2, 8],
    [3, 4],
    [3, 4],
    [1, 10000025],
    [3, 6],
    [1, 10000037],
    [2, 9],
    [2, 8],
    [1, 10000042],
    [2, 7],
    [2, 10],
    [1, 10000002],
    [2, 2],
    [2, 4],
    [2, 5],
    [1, 10000005],
    [1, 10000021],
    [1, 10000031],
    [3, 4],
    [1, 10000013],
    [1, 10000045],
    [3, 8],
    [3, 2],
    [3, 4],
    [1, 10000024],
    [3, 5],
    [2, 2],
    [2, 5],
    [3, 3],
    [2, 1],
    [3, 6],
    [1, 10000021],
    [2, 4],
    [3, 1],
    [3, 5],
    [1, 10000049],
    [1, 10000010],
    [1, 10000036],
    [2, 8],
    [1, 10000001],
    [3, 2],
    [1, 10000017],
    [1, 10000002],
    [1, 10000003],
    [3, 2],
    [1, 10000048],
    [1, 10000009],
    [3, 3],
    [1, 10000031],
    [1, 10000044],
    [3, 7],
    [1, 10000025],
    [1, 10000041],
    [1, 10000031],
    [1, 10000049],
    [2, 6],
    [1, 10000015],
    [3, 2],
    [3, 1],
    [2, 9],
    [2, 2],
    [3, 8],
    [2, 9],
    [1, 10000018],
    [3, 8],
    [2, 6],
    [2, 6],
    [1, 10000027],
    [2, 1],
    [3, 6],
    [1, 10000030],
    [1, 10000044],
    [1, 10000014],
    [3, 3],
    [2, 8],
    [3, 6],
    [1, 10000031],
    [3, 7],
    [1, 10000050],
    [1, 10000011],
    [1, 10000002],
    [1, 10000016],
    [2, 5],
    [2, 3],
    [1, 10000048],
    [3, 5],
    [3, 10],
    [2, 4],
    [3, 7],
    [3, 10],
    [1, 10000013],
    [1, 10000040],
    [3, 9],
    [3, 1],
    [1, 10000007],
    [2, 7],
    [2, 8],
    [3, 5],
    [3, 5],
    [1, 10000048],
    [1, 10000020],
    [1, 10000026],
    [3, 3],
    [1, 10000033],
    [1, 10000009],
    [1, 10000041],
    [2, 10],
    [1, 10000039],
    [2, 7],
    [2, 1],
    [2, 9],
    [2, 10],
    [2, 9],
    [1, 10000035],
    [1, 10000042],
    [1, 10000046],
    [3, 10],
    [1, 10000004],
    [3, 10],
    [2, 8],
    [3, 5],
    [3, 2],
    [3, 7],
    [3, 4],
    [2, 4],
    [2, 4],
    [2, 2],
    [3, 2],
    [1, 10000040],
    [2, 8],
    [1, 10000001],
    [1, 10000009],
    [3, 4],
    [1, 10000044],
    [3, 3],
    [3, 2],
    [2, 4],
    [1, 10000025],
    [1, 10000040],
    [3, 2],
    [3, 5],
    [2, 10],
    [3, 1],
    [1, 10000003],
    [2, 4],
    [3, 5],
    [2, 9],
    [2, 5],
    [1, 10000028],
    [1, 10000010],
    [1, 10000012],
    [1, 10000034],
    [3, 1],
    [3, 1],
    [3, 7],
    [2, 4],
    [2, 6],
    [3, 8],
    [2, 7],
    [3, 5],
    [1, 10000026],
    [3, 8],
    [1, 10000035],
    [3, 9],
    [3, 3],
    [3, 7],
    [3, 2],
    [2, 8],
    [1, 10000001],
    [3, 3],
    [2, 1],
    [3, 8],
    [2, 2],
    [2, 1],
    [2, 2],
    [1, 10000027],
    [3, 7],
    [3, 10],
    [2, 2],
    [1, 10000036],
    [1, 10000021],
    [3, 5],
    [1, 10000020],
    [1, 10000001],
    [3, 7],
    [2, 8],
    [3, 7],
    [1, 10000042],
    [1, 10000016],
    [2, 3],
    [1, 10000018],
    [2, 3],
    [2, 2],
    [2, 2],
    [2, 3],
    [3, 4],
    [2, 9],
    [1, 10000034],
    [2, 1],
    [3, 1],
    [1, 10000046],
    [3, 1],
    [3, 10],
    [2, 9],
    [3, 4],
    [1, 10000002],
    [3, 5],
    [2, 2],
    [2, 3],
    [1, 10000048],
    [2, 10],
    [3, 4],
    [1, 10000035],
    [3, 9],
    [3, 4],
    [1, 10000041],
    [1, 10000016],
    [3, 2],
    [2, 5],
    [2, 3],
    [2, 5],
    [1, 10000002],
    [3, 5],
    [1, 10000004],
    [3, 6],
    [3, 5],
    [2, 9],
    [1, 10000038],
    [1, 10000038],
    [3, 4],
    [3, 5],
    [1, 10000033],
    [2, 3],
    [1, 10000029],
    [1, 10000043],
    [2, 3],
    [2, 7],
    [3, 1],
    [1, 10000015],
    [3, 1],
    [1, 10000012],
    [3, 4],
    [1, 10000050],
    [1, 10000042],
    [2, 5],
    [2, 10],
    [1, 10000021],
    [1, 10000031],
    [1, 10000026],
    [2, 3],
    [2, 1],
    [2, 1],
    [1, 10000040],
    [3, 8],
    [3, 6],
    [1, 10000045],
    [2, 4],
    [1, 10000035],
    [2, 3],
    [1, 10000041],
    [1, 10000010],
    [2, 9],
    [1, 10000023],
    [2, 5],
    [3, 7],
    [1, 10000017],
    [2, 7],
    [1, 10000044],
    [2, 10],
    [3, 3],
    [1, 10000026],
    [3, 1],
    [2, 6],
    [1, 10000025],
    [3, 5],
    [3, 2],
    [3, 6],
    [1, 10000027],
    [2, 3],
    [3, 1],
    [2, 10],
    [1, 10000005],
    [2, 3],
    [3, 1],
    [3, 5],
    [1, 10000038],
    [3, 6],
    [2, 8],
    [3, 4],
    [2, 10],
    [2, 9],
    [3, 4],
    [3, 8],
    [2, 3],
    [3, 8],
    [2, 5],
    [1, 10000010],
    [1, 10000016],
    [1, 10000020],
    [3, 1],
    [1, 10000020],
    [2, 5],
    [2, 1]
]));

//i gave up on case 8, 9, 12 they are 100k long and i have no idea whats not working
